// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int          @id @default(autoincrement())
  name         String
  organization String
  role         Roles        @default(USER)
  author       ChangeLogs[] @relation(name: "author")
  editor       ChangeLogs[] @relation(name: "editor")
  Picture      Picture[]
}

model Picture {
  id               Int                @id @default(autoincrement())
  species          Species            @relation(fields: [speciesId], references: [id])
  speciesId        Int
  user             User               @relation(fields: [userId], references: [id])
  userId           Int
  url              String
  PictureReference PictureReference[]
}

model PictureReference {
  id        Int     @id @default(autoincrement())
  picture   Picture @relation(fields: [pictureId], references: [id])
  pictureId Int

  Family     Family[]
  Strategy   Strategy[]
  Skull      Skull[]
  Molts      Molts[]
  MoltLimits MoltLimits[]
  Sex        Sex[]

  AgeSexTraits AgeSexTraits[]
  Ages         Ages[]
}

model Reference {
  id        Int        @id @default(autoincrement())
  type      String
  authors   String
  title     String
  location  String
  changelog ChangeLogs @relation(fields: [changeId], references: [id])
  changeId  Int
  isDeleted Boolean    @default(false)
  oldId     Int?

  Family       Family[]
  Strategy     Strategy[]
  Skull        Skull[]
  Molts        Molts[]
  MoltLimits   MoltLimits[]
  Sex          Sex[]
  AgeSexTraits AgeSexTraits[]
  Ages         Ages[]
}

model Family {
  id          Int        @id @default(autoincrement())
  name        String
  primaries   Int
  changelog   ChangeLogs @relation(fields: [changeId], references: [id])
  changeId    Int
  isDeleted   Boolean    @default(false)
  oldId       Int?
  reference   Reference  @relation(fields: [referenceId], references: [id])
  referenceId Int



  pictureReference   PictureReference? @relation(fields: [pictureReferenceId], references: [id])
  pictureReferenceId Int?
}

model Species {
  id       Int        @id @default(autoincrement())
  genus    String
  species  String
  pt_name  String
  strategy Strategy[]
  skull    Skull[]

  molts     Molts[]
  changelog ChangeLogs? @relation(fields: [changeId], references: [id])
  changeId  Int?
  isDeleted Boolean     @default(false)
  oldId     Int?


  moltLimits MoltLimits[]
  ages       Ages[]
  picture    Picture[]

}

model Strategy {
  id          Int        @id @default(autoincrement())
  species     Species    @relation(fields: [speciesId], references: [id])
  speciesId   Int
  changelog   ChangeLogs @relation(fields: [changeId], references: [id])
  changeId    Int
  isDeleted   Boolean    @default(false)
  oldId       Int?
  reference   Reference  @relation(fields: [referenceId], references: [id])
  referenceId Int


  pictureReference   PictureReference? @relation(fields: [pictureReferenceId], references: [id])
  pictureReferenceId Int?
}

model Skull {
  id          Int        @id @default(autoincrement())
  species     Species    @relation(fields: [speciesId], references: [id])
  speciesId   Int
  description String
  changelog   ChangeLogs @relation(fields: [changeId], references: [id])
  changeId    Int
  isDeleted   Boolean    @default(false)
  oldId       Int?
  reference   Reference  @relation(fields: [referenceId], references: [id])
  referenceId Int


  pictureReference   PictureReference? @relation(fields: [pictureReferenceId], references: [id])
  pictureReferenceId Int?
}

model Molts {
  id          Int        @id @default(autoincrement())
  species     Species    @relation(fields: [speciesId], references: [id])
  speciesId   Int
  molt        MoltNames
  extension   Extensions
  changelog   ChangeLogs @relation(fields: [changeId], references: [id])
  changeId    Int
  isDeleted   Boolean    @default(false)
  oldId       Int?
  reference   Reference  @relation(fields: [referenceId], references: [id])
  referenceId Int


  pictureReference   PictureReference? @relation(fields: [pictureReferenceId], references: [id])
  pictureReferenceId Int?
}

model MoltLimits {
  id          Int              @id @default(autoincrement())
  species     Species          @relation(fields: [speciesId], references: [id])
  speciesId   Int
  molt_limit  MoltLimitOptions @relation(fields: [moltLimitId], references: [id])
  moltLimitId Int
  changelog   ChangeLogs       @relation(fields: [changeId], references: [id])
  changeId    Int
  isDeleted   Boolean          @default(false)
  oldId       Int?
  reference   Reference        @relation(fields: [referenceId], references: [id])
  referenceId Int


  pictureReference   PictureReference? @relation(fields: [pictureReferenceId], references: [id])
  pictureReferenceId Int?
}

model Sex {
  id Int @id @default(autoincrement())

  age                Ages              @relation(fields: [ageId], references: [id])
  ageId              Int
  changelog          ChangeLogs        @relation(fields: [changeId], references: [id])
  changeId           Int
  isDeleted          Boolean           @default(false)
  oldId              Int?
  reference          Reference         @relation(fields: [referenceId], references: [id])
  referenceId        Int
  pictureReference   PictureReference? @relation(fields: [pictureReferenceId], references: [id])
  pictureReferenceId Int?
  ageSexTraits       AgeSexTraits[]
}

model Ages {
  id                 Int               @id @default(autoincrement())
  species            Species           @relation(fields: [speciesId], references: [id])
  speciesId          Int
  age                ValidAges
  sex                Sex[]
  changelog          ChangeLogs        @relation(fields: [changeId], references: [id])
  changeId           Int
  isDeleted          Boolean           @default(false)
  oldId              Int?
  reference          Reference?        @relation(fields: [referenceId], references: [id])
  referenceId        Int?
  pictureReference   PictureReference? @relation(fields: [pictureReferenceId], references: [id])
  pictureReferenceId Int?

}

model AgeSexTraits {
  tract              Tracts            @relation(fields: [tractId], references: [id])
  tractId            Int
  characteristics    String
  id                 Int               @id @default(autoincrement())
  sex                Sex               @relation(fields: [sexId], references: [id])
  sexId              Int
  changelog          ChangeLogs        @relation(fields: [changeId], references: [id])
  changeId           Int
  isDeleted          Boolean           @default(false)
  oldId              Int?
  reference          Reference         @relation(fields: [referenceId], references: [id])
  referenceId        Int
  pictureReference   PictureReference? @relation(fields: [pictureReferenceId], references: [id])
  pictureReferenceId Int?

}

model Tracts {
  id           Int            @id @default(autoincrement())
  name         String
  pt_name      String
  AgeSexTraits AgeSexTraits[]
}

model ChangeLogs {
  id       Int        @id @default(autoincrement())
  //  Author
  author   User       @relation(name: "author", fields: [authorId], references: [id])
  authorId Int
  editor   User?      @relation(name: "editor", fields: [editorId], references: [id])
  editorId Int?
  // Editor
  table    String
  row_id   Int?
  status   Status     @default(PENDING)
  type     ChangeType

  Molts        Molts[]
  Reference    Reference[]
  Family       Family[]
  Species      Species[]
  Strategy     Strategy[]
  Skull        Skull[]
  MoltLimits   MoltLimits[]
  Sex          Sex[]
  Ages         Ages[]
  AgeSexTraits AgeSexTraits[]
}

model MoltLimitOptions {
  id              Int          @id @default(autoincrement())
  molt_limit_type String
  pt_name         String
  MoltLimits      MoltLimits[]
}

enum ChangeType {
  CREATE
  DELETE
  UPDATE
}

enum Status {
  APPROVED
  REJECTED
  PENDING
}

enum MoltNames {
  FPJ
  FPF
  FPA
  DPB
  DPA
}

enum Extensions {
  Absent
  Limited
  Partial
  Incomplete
  Eccentric
  Complete
}

enum Strategies {
  CBS
  CAS
  SBS
  SAS
}

enum Roles {
  USER
  ADMIN
}

enum MoltLimitsTypes {
  g_covs
  versus
  alula
  primaries
  secondaries
  pp_covs
  tail
  among_covs

}

enum Traits {
  crown
  bill
  iris
  greater_coverts
  lesser_coverts
  median_covers
  secondaries
  primaries

}

enum ValidAges {
  FCJ
  FAJ
  FCF
  FCA
  SCB
  SAB
  SCA
  TCB
  TAB
  TCA
  QCB
  QAB
  QCA
  CCB
  CAB
  CCA

}

enum ValidSex {
  Male
  Female
  Undertemined
}
